# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import python_proto.api_pb2 as api__pb2


class ProcessStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Relevance = channel.unary_unary(
        '/Process/Relevance',
        request_serializer=api__pb2.apiCall.SerializeToString,
        response_deserializer=api__pb2.apiResponse.FromString,
        )
    self.Troll = channel.unary_unary(
        '/Process/Troll',
        request_serializer=api__pb2.apiCall.SerializeToString,
        response_deserializer=api__pb2.apiResponse.FromString,
        )


class ProcessServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Relevance(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Troll(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ProcessServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Relevance': grpc.unary_unary_rpc_method_handler(
          servicer.Relevance,
          request_deserializer=api__pb2.apiCall.FromString,
          response_serializer=api__pb2.apiResponse.SerializeToString,
      ),
      'Troll': grpc.unary_unary_rpc_method_handler(
          servicer.Troll,
          request_deserializer=api__pb2.apiCall.FromString,
          response_serializer=api__pb2.apiResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Process', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
